# -*- coding: utf-8 -*-
"""IMI_data_EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HoApwhn1dsHg1UiWemQmDisP2N2XnI9E
"""




import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
import numpy as np
from scipy.stats import mode
"""
data_path = ""
wire_file_path = data_path + 'wire.csv'
emt_file_path = data_path + 'emt.csv'
eft_file_path = data_path + 'eft.csv'
cheque_file_path = data_path + 'cheque.csv'
card_file_path = data_path + 'card.csv'
abm_file_path = data_path + 'abm.csv'"""

def majority(series):
    return series.mode()[0] if not series.mode().empty else None

def get_general_table(wire_file_path, emt_file_path, eft_file_path,
                      cheque_file_path, card_file_path, abm_file_path, output_path):
    df_wire = pd.read_csv(wire_file_path)

    df_emt = pd.read_csv(emt_file_path)

    df_eft = pd.read_csv(eft_file_path)

    df_cheque = pd.read_csv(cheque_file_path)

    df_card = pd.read_csv(card_file_path)

    df_abm = pd.read_csv(abm_file_path)

    scaler = StandardScaler()

    # 2. Convert `transaction_date` to datetime
    df_wire['transaction_date'] = pd.to_datetime(df_wire['transaction_date'])

    # 3. Extract year, month, and day into separate columns
    df_wire['year'] = df_wire['transaction_date'].dt.year
    df_wire['month'] = df_wire['transaction_date'].dt.month
    df_wire['day'] = df_wire['transaction_date'].dt.day

    # 3. Calculate transaction intervals for the same customer

    df_wire = df_wire.sort_values(by=['customer_id', 'transaction_date'])  # Sort by customer_id and transaction_date

    # Group by customer_id and calculate transaction intervals
    df_wire['transaction_interval_days'] = df_wire.groupby('customer_id')['transaction_date'].diff().dt.days
    df_wire['transaction_interval_days'] = df_wire['transaction_interval_days'].fillna(-1).astype(int)
    # Normalize/Standardize Numerical Values
    df_wire['amount_cad_normalized'] = scaler.fit_transform(df_wire[['amount_cad']])

    # unify debit_credit
    df_emt['debit_credit'] = df_emt['debit_credit'].replace({'D': 'debit', 'C': 'credit'})

    # 2. Convert `transaction_date` to datetime
    df_emt['transaction_date'] = pd.to_datetime(df_emt['transaction_date'])

    # 3. Extract year, month, and day into separate columns
    df_emt['year'] = df_emt['transaction_date'].dt.year
    df_emt['month'] = df_emt['transaction_date'].dt.month
    df_emt['day'] = df_emt['transaction_date'].dt.day

    # 3. Calculate transaction intervals for the same customer

    df_emt = df_emt.sort_values(by=['customer_id', 'transaction_date'])  # Sort by customer_id and transaction_date

    # Group by customer_id and calculate transaction intervals
    df_emt['transaction_interval_days'] = df_emt.groupby('customer_id')['transaction_date'].diff().dt.days
    df_emt['transaction_interval_days'] = df_emt['transaction_interval_days'].fillna(-1).astype(int)
    # Normalize/Standardize Numerical Values
    df_emt['amount_cad_normalized'] = scaler.fit_transform(df_emt[['amount_cad']])

    # 2. Convert `transaction_date` to datetime
    df_eft['transaction_date'] = pd.to_datetime(df_eft['transaction_date'])

    # 3. Extract year, month, and day into separate columns
    df_eft['year'] = df_eft['transaction_date'].dt.year
    df_eft['month'] = df_eft['transaction_date'].dt.month
    df_eft['day'] = df_eft['transaction_date'].dt.day

    # 3. Calculate transaction intervals for the same customer

    df_eft = df_eft.sort_values(by=['customer_id', 'transaction_date'])  # Sort by customer_id and transaction_date

    # Group by customer_id and calculate transaction intervals
    df_eft['transaction_interval_days'] = df_eft.groupby('customer_id')['transaction_date'].diff().dt.days
    df_eft['transaction_interval_days'] = df_eft['transaction_interval_days'].fillna(-1).astype(int)
    # Normalize/Standardize Numerical Values
    df_eft['amount_cad_normalized'] = scaler.fit_transform(df_eft[['amount_cad']])

    # 2. Convert `transaction_date` to datetime
    df_cheque['transaction_date'] = pd.to_datetime(df_cheque['transaction_date'])

    # 3. Extract year, month, and day into separate columns
    df_cheque['year'] = df_cheque['transaction_date'].dt.year
    df_cheque['month'] = df_cheque['transaction_date'].dt.month
    df_cheque['day'] = df_cheque['transaction_date'].dt.day

    # 3. Calculate transaction intervals for the same customer

    df_cheque = df_cheque.sort_values(
        by=['customer_id', 'transaction_date'])  # Sort by customer_id and transaction_date

    # Group by customer_id and calculate transaction intervals
    df_cheque['transaction_interval_days'] = df_cheque.groupby('customer_id')['transaction_date'].diff().dt.days
    df_cheque['transaction_interval_days'] = df_cheque['transaction_interval_days'].fillna(-1).astype(int)
    # Normalize/Standardize Numerical Values
    df_cheque['amount_cad_normalized'] = scaler.fit_transform(df_cheque[['amount_cad']])

    # true flase to 1 0
    df_card['ecommerce_ind'] = df_card['ecommerce_ind'].astype(int)

    # Replace missing values in `country`, `province`, and `city` with "unknown"
    df_card[['country', 'province', 'city']] = df_card[['country', 'province', 'city']].fillna('unknown')

    # Convert `transaction_date` to datetime
    df_card['transaction_date'] = pd.to_datetime(df_card['transaction_date'])

    # Extract year, month, and day into separate columns
    df_card['year'] = df_card['transaction_date'].dt.year
    df_card['month'] = df_card['transaction_date'].dt.month
    df_card['day'] = df_card['transaction_date'].dt.day

    # Calculate transaction intervals for the same customer

    df_card = df_card.sort_values(by=['customer_id', 'transaction_date'])  # Sort by customer_id and transaction_date

    # Group by customer_id and calculate transaction intervals
    df_card['transaction_interval_days'] = df_card.groupby('customer_id')['transaction_date'].diff().dt.days
    df_card['transaction_interval_days'] = df_card['transaction_interval_days'].fillna(-1).astype(int)
    # Normalize/Standardize Numerical Values
    df_card['amount_cad_normalized'] = scaler.fit_transform(df_card[['amount_cad']])

    # true flase to 1 0
    df_abm['cash_indicator'] = df_abm['cash_indicator'].astype(int)

    # Replace missing values in `country`, `province`, and `city` with "unknown"
    df_abm[['country', 'province', 'city']] = df_abm[['country', 'province', 'city']].fillna('unknown')

    # Convert `transaction_date` to datetime
    df_abm['transaction_date'] = pd.to_datetime(df_abm['transaction_date'])

    # Extract year, month, and day into separate columns
    df_abm['year'] = df_abm['transaction_date'].dt.year
    df_abm['month'] = df_abm['transaction_date'].dt.month
    df_abm['day'] = df_abm['transaction_date'].dt.day

    # Calculate transaction intervals for the same customer

    df_abm = df_abm.sort_values(by=['customer_id', 'transaction_date'])  # Sort by customer_id and transaction_date

    # Group by customer_id and calculate transaction intervals
    df_abm['transaction_interval_days'] = df_abm.groupby('customer_id')['transaction_date'].diff().dt.days
    df_abm['transaction_interval_days'] = df_abm['transaction_interval_days'].fillna(-1).astype(int)
    # Normalize/Standardize Numerical Values
    df_abm['amount_cad_normalized'] = scaler.fit_transform(df_abm[['amount_cad']])

    # Add a transaction_type column
    df_wire['transaction_type'] = 'Wire'
    df_card['transaction_type'] = 'Card'
    df_abm['transaction_type'] = 'ABM'
    df_eft['transaction_type'] = 'EFT'
    df_emt['transaction_type'] = 'EMT'
    df_cheque['transaction_type'] = 'Cheque'

    # Select relevant columns
    df_card = df_card[['customer_id', 'amount_cad', 'debit_credit', 'transaction_date', 'transaction_type']]
    df_abm = df_abm[['customer_id', 'amount_cad', 'debit_credit', 'transaction_date', 'transaction_type']]
    df_wire = df_wire[['customer_id', 'amount_cad', 'debit_credit', 'transaction_date', 'transaction_type']]
    df_eft = df_eft[['customer_id', 'amount_cad', 'debit_credit', 'transaction_date', 'transaction_type']]
    df_emt = df_emt[['customer_id', 'amount_cad', 'debit_credit', 'transaction_date', 'transaction_type']]
    df_cheque = df_cheque[['customer_id', 'amount_cad', 'debit_credit', 'transaction_date', 'transaction_type']]

    # Combine all tables
    df_combined = pd.concat([df_card, df_abm, df_wire, df_eft, df_emt, df_cheque], ignore_index=True)

    # Convert transaction_date to datetime for uniformity
    df_combined['transaction_date'] = pd.to_datetime(df_combined['transaction_date'])

    # Calculate transaction intervals for the same customer

    df_combined = df_combined.sort_values(
        by=['customer_id', 'transaction_date'])  # Sort by customer_id and transaction_date

    # Group by customer_id and calculate transaction intervals
    df_combined['transaction_interval_days'] = df_combined.groupby('customer_id')['transaction_date'].diff().dt.days
    df_combined['transaction_interval_days'] = df_combined['transaction_interval_days'].fillna(-1).astype(int)

    df_credit = df_combined[df_combined['debit_credit'] == 'credit']
    df_debit = df_combined[df_combined['debit_credit'] == 'debit']

    # Find the maximum transaction amount for each customer
    max_credit_transactions_per_customer = df_credit.groupby('customer_id')['amount_cad'].max().reset_index()

    # Rename columns for clarity
    max_credit_transactions_per_customer.columns = ['customer_id', 'max_credit_transaction_amount']

    # Output the result

    max_debit_transactions_per_customer = df_debit.groupby('customer_id')['amount_cad'].max().reset_index()
    max_debit_transactions_per_customer.columns = ['customer_id', 'max_debit_transaction_amount']

    # Find the average transaction amount for each customer
    avg_debit_transactions_per_customer = df_debit.groupby('customer_id')['amount_cad'].mean().reset_index()

    # Rename columns for clarity
    avg_debit_transactions_per_customer.columns = ['customer_id', 'avg_debit_transaction_amount']

    # Output the result

    avg_credit_transactions_per_customer = df_credit.groupby('customer_id')['amount_cad'].mean().reset_index()
    avg_credit_transactions_per_customer.columns = ['customer_id', 'avg_credit_transaction_amount']

    grouped = df_combined.groupby(["customer_id", "debit_credit"])["amount_cad"].sum().unstack(fill_value=0)
    grouped.columns = ['total_debit_amount_cad', 'total_credit_amount_cad']

    # Group by customer_id to calculate metrics
    metrics = df_combined.groupby('customer_id').agg(
        credit_count=('debit_credit', lambda x: (x == 'credit').sum()),
        debit_count=('debit_credit', lambda x: (x == 'debit').sum()),
        transaction_frequency=('customer_id', 'size'),
        avg_transaction_interval_day=('transaction_interval_days', lambda x: x[x > 0].mean()),  # Exclude -1
        mode_transaction_interval_day=('transaction_interval_days', majority),
        date_range=('transaction_date', lambda x: (x.max() - x.min()).days),
        mode_transaction_type=('transaction_type', majority),
    ).reset_index()
    metrics['debit_count'] = metrics['transaction_frequency'] - metrics['credit_count']
    metrics['avg_transaction_interval_day'] = metrics['avg_transaction_interval_day'].fillna(-1)

    metrics = pd.merge(metrics, grouped, on='customer_id', how='inner')
    # Reorder columns for better readability
    metrics = metrics[
        ['customer_id', 'total_debit_amount_cad', 'total_credit_amount_cad', 'debit_count', 'credit_count',
         'transaction_frequency', 'avg_transaction_interval_day',
         'mode_transaction_interval_day', 'mode_transaction_type', 'date_range']]

    merged_df = pd.merge(metrics, max_credit_transactions_per_customer, on='customer_id', how='inner')

    merged_df_final = pd.merge(merged_df, avg_credit_transactions_per_customer, on='customer_id', how='inner')

    merged_df_final = pd.merge(merged_df_final, max_debit_transactions_per_customer, on='customer_id', how='inner')

    merged_df_final = pd.merge(merged_df_final, avg_debit_transactions_per_customer, on='customer_id', how='inner')

    # Initialize LabelEncoder
    label_encoder = LabelEncoder()
    merged_df_final['mode_transaction_type'] = label_encoder.fit_transform(merged_df_final['mode_transaction_type'])

    merged_df_final.to_csv(output_path + "general_table.csv", index=False)


